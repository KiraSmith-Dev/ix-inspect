declare function uncurryThis(func: Function): (thisArg: any, ...argArray: any[]) => any;
declare function ErrorCaptureStackTrace(targetObject: any): void;
declare const _default: {
    makeSafe: (unsafe: any, safe: any) => any;
    internalBinding(mod: string): {
        hasIntl: boolean;
    };
    Array: ArrayConstructor;
    ArrayIsArray: (arg: any) => arg is any[];
    ArrayPrototypeFilter: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeForEach: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeIncludes: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeIndexOf: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeJoin: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypePop: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypePush: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypePushApply: (thisArg: unknown, args: any[]) => unknown;
    ArrayPrototypeSort: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeSplice: (thisArg: any, ...argArray: any[]) => any;
    ArrayPrototypeUnshift: (thisArg: any, ...argArray: any[]) => any;
    BigIntPrototypeValueOf: (thisArg: any, ...argArray: any[]) => any;
    BooleanPrototypeValueOf: (thisArg: any, ...argArray: any[]) => any;
    DatePrototypeGetTime: (thisArg: any, ...argArray: any[]) => any;
    DatePrototypeToISOString: (thisArg: any, ...argArray: any[]) => any;
    DatePrototypeToString: (thisArg: any, ...argArray: any[]) => any;
    ErrorCaptureStackTrace: typeof ErrorCaptureStackTrace;
    ErrorPrototypeToString: (thisArg: any, ...argArray: any[]) => any;
    FunctionPrototypeCall: (thisArg: any, ...argArray: any[]) => any;
    FunctionPrototypeToString: (thisArg: any, ...argArray: any[]) => any;
    globalThis: typeof globalThis;
    JSONStringify: {
        (value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string;
        (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string;
    };
    MapPrototypeGetSize: (thisArg: any, ...argArray: any[]) => any;
    MapPrototypeEntries: (thisArg: any, ...argArray: any[]) => any;
    MathFloor: (x: number) => number;
    MathMax: (...values: number[]) => number;
    MathMin: (...values: number[]) => number;
    MathRound: (x: number) => number;
    MathSqrt: (x: number) => number;
    MathTrunc: (x: number) => number;
    Number: NumberConstructor;
    NumberIsFinite: (number: unknown) => boolean;
    NumberIsNaN: (number: unknown) => boolean;
    NumberParseFloat: (string: string) => number;
    NumberParseInt: (string: string, radix?: number | undefined) => number;
    NumberPrototypeValueOf: (thisArg: any, ...argArray: any[]) => any;
    Object: ObjectConstructor;
    ObjectAssign: {
        <T, U>(target: T, source: U): T & U;
        <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;
        <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;
        (target: object, ...sources: any[]): any;
    };
    ObjectCreate: {
        (o: object | null): any;
        (o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;
    };
    ObjectDefineProperty: <T_3>(o: T_3, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T_3;
    ObjectGetOwnPropertyDescriptor: (o: any, p: PropertyKey) => PropertyDescriptor | undefined;
    ObjectGetOwnPropertyNames: (o: any) => string[];
    ObjectGetOwnPropertySymbols: (o: any) => symbol[];
    ObjectGetPrototypeOf: (o: any) => any;
    ObjectIs: (value1: any, value2: any) => boolean;
    ObjectKeys: {
        (o: object): string[];
        (o: {}): string[];
    };
    ObjectPrototypeHasOwnProperty: (thisArg: any, ...argArray: any[]) => any;
    ObjectPrototypePropertyIsEnumerable: (thisArg: any, ...argArray: any[]) => any;
    ObjectSeal: <T_4>(o: T_4) => T_4;
    ObjectSetPrototypeOf: (o: any, proto: object | null) => any;
    ReflectApply: typeof Reflect.apply;
    ReflectOwnKeys: typeof Reflect.ownKeys;
    RegExp: RegExpConstructor;
    RegExpPrototypeTest: (thisArg: any, ...argArray: any[]) => any;
    RegExpPrototypeToString: (thisArg: any, ...argArray: any[]) => any;
    SafeStringIterator: any;
    SafeMap: any;
    SafeSet: any;
    SetPrototypeGetSize: (thisArg: any, ...argArray: any[]) => any;
    SetPrototypeValues: (thisArg: any, ...argArray: any[]) => any;
    String: StringConstructor;
    StringPrototypeCharCodeAt: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeCodePointAt: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeEndsWith: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeIncludes: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeNormalize: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypePadEnd: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypePadStart: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeRepeat: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeReplace: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeSlice: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeSplit: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeToLowerCase: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeTrim: (thisArg: any, ...argArray: any[]) => any;
    StringPrototypeValueOf: (thisArg: any, ...argArray: any[]) => any;
    SymbolPrototypeToString: (thisArg: any, ...argArray: any[]) => any;
    SymbolPrototypeValueOf: (thisArg: any, ...argArray: any[]) => any;
    SymbolIterator: symbol;
    SymbolFor: (key: string) => symbol;
    SymbolToStringTag: symbol;
    TypedArrayPrototypeGetLength: (val: Function) => any;
    Uint8Array: Uint8ArrayConstructor;
    uncurryThis: typeof uncurryThis;
};
export default _default;
//# sourceMappingURL=primordials.d.ts.map